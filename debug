DEPRECATED: The package at Archive from https://github.com/msakai/haskell-MIP/archive/4295aa21a24a30926b55770c55ac00f749fb8a39.tar.gz in subdir MIP does not include a cabal file.
Instead, it includes an hpack package.yaml file for generating a cabal file.
This usage is deprecated; please see https://github.com/commercialhaskell/stack/issues/5210.
Support for this workflow will be removed in the future.

Stack has not been tested with GHC versions above 9.0, and using 9.4.5, this may fail
Stack has not been tested with Cabal versions above 3.4, but version 3.8.1.0 was found, this may fail
accelerate-llvm-native> test (suite: nofib-llvm-native)

readswrites
OriginalAcc:
\a0 -> fold (\x0 x1 -> x0 + x1) 0 (let a1 = map (\x0 -> x0 * 2) a0 in zipWith (\x0 x1 -> x0 + x1) (replicate (let () = () in T1 (), 1000000) (map (\x0 -> x0 + 1) a1)) (replicate (let () = () in T1 (), 1000000) (generate (T1 1000) (\(T1 x0) -> x0 + (a1 ! (T1 0))))))

Desugared OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 * 2, in (Z :. e0) b0, out (Z :. e0) b1)
  b2: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 + 1, in (Z :. e0) b1, out (Z :. e0) b2)
  T1 () = compute let () = () in T1 ()
  e1: Int = compute 1000000
  T2 (e2: Int) (e3: Int) = compute indexFull (T2 () e1) (T1 e0)
  b3: [Int]¹ = alloc Int[Z :. e2 :. e3]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e1) (T2 x0 x1), in (Z :. e0) b2, out (Z :. e2 :. e3) b3)
  e4: Int = compute 1000
  b4: [Int]¹ = alloc Int[Z :. e4]
  execute generate (\(T1 x0) -> x0 + (let x1 = toIndex (T1 e0) (T1 0) in (b1 !! x1)), out (Z :. e4) b4)
  T1 () = compute let () = () in T1 ()
  e5: Int = compute 1000000
  T2 (e6: Int) (e7: Int) = compute indexFull (T2 () e5) (T1 e4)
  b5: [Int]¹ = alloc Int[Z :. e6 :. e7]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e5) (T2 x0 x1), in (Z :. e4) b4, out (Z :. e6 :. e7) b5)
  e8: Int = compute min e2 e6
  e9: Int = compute min e3 e7
  b6: [Int]¹ = alloc Int[Z :. e8 :. e9]
  b7: [Int]¹ = alloc Int[Z :. e8 :. e9]
  b8: [Int]¹ = alloc Int[Z :. e8 :. e9]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e2 :. e3) b3, out (Z :. e8 :. e9) b7)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e6 :. e7) b5, out (Z :. e8 :. e9) b8)
  execute map (\(x0, x1) -> x0 + x1, in (Z :. e8 :. e9) (b7, b8), out (Z :. e8 :. e9) b6)
  b9: [Int]¹ = alloc Int[Z :. e8]
  b10: [Int]¹ = alloc Int[Z :. e8]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e8 :. e9) b6, out (Z :. e8) b10)
  execute map (\x0 -> let (x1, x2) = (0, x0) in x1 + x2, in (Z :. e8) b10, out (Z :. e8) b9)
  return (T2 e8 b9)

Simplified OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
  b2: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) b2)
  e1: Int = compute 1000000
  b3: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b2, out (Z :. e0 :. e1) b3)
  e2: Int = compute 1000
  b4: [Int]¹ = alloc Int[Z :. e2]
  execute generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) b4)
  e3: Int = compute 1000
  e4: Int = compute 1000000
  b5: [Int]¹ = alloc Int[Z :. e3 :. e4]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) b4, out (Z :. e3 :. e4) b5)
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  b6: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b7: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b8: [Int]¹ = alloc Int[Z :. e5 :. e6]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) b3, out (Z :. e5 :. e6) b7)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) b5, out (Z :. e5 :. e6) b8)
  execute map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (b7, b8), out (Z :. e5 :. e6) b6)
  b9: [Int]¹ = alloc Int[Z :. e5]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) b6, out (Z :. e5) b9)
  return (T2 e5 b9)

PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  b2: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  e2: Int = compute 1000
  e3: Int = compute 1000
  e4: Int = compute 1000000
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  execute map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
  b3: [Int]¹ = alloc Int[Z :. e0 :. e1]
  b4: [Int]¹ = alloc Int[Z :. e2]
  b5: [Int]¹ = alloc Int[Z :. e3 :. e4]
  b6: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b7: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b8: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b9: [Int]¹ = alloc Int[Z :. e5]
  execute {
    generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) b4)
    fused diagonally: (b4)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) b4, out (Z :. e3 :. e4) b5)
    fused diagonally: (b5)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) b5, out (Z :. e5 :. e6) b8)
    fused diagonally: (b8)
    map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) b2)
    fused diagonally: (b2)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b2, out (Z :. e0 :. e1) b3)
    fused diagonally: (b3)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) b3, out (Z :. e5 :. e6) b7)
    fused diagonally: (b7)
    map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (b7, b8), out (Z :. e5 :. e6) b6)
    fused diagonally: (b6)
    fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) b6, out (Z :. e5) b9)
  }
  return (T2 e5 b9)
SLV'd PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  e2: Int = compute 1000
  e3: Int = compute 1000
  e4: Int = compute 1000000
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  execute map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
  b2: [Int]¹ = alloc Int[Z :. e5]
  execute {
    generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) %0)
    fused vertically: (%0)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) %0, out (Z :. e3 :. e4) %1)
    fused vertically: (%1)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) %1, out (Z :. e5 :. e6) %2)
    fused vertically: (%2)
    map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) %3)
    fused vertically: (%3)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) %3, out (Z :. e0 :. e1) %4)
    fused vertically: (%4)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) %4, out (Z :. e5 :. e6) %5)
    fused vertically: (%5)
    map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (%5, %2), out (Z :. e5 :. e6) %6)
    fused vertically: (%6)
    fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) %6, out (Z :. e5) b2)
  }
  return (T2 e5 b2)

Schedule:
\T2 (s0: Signal, r0: *Int) (s1: Signal, r1: *[Int]) ->
  \T2 (s2': Resolver, r2': *out Int) (s3': Resolver, r3': *out [Int]) ->
    await [s0]
    e0: Int = compute 1000000
    e1: Int = compute 1000
    e2: Int = compute 1000
    e3: Int = compute 1000000
    e4: Int = compute 1000000
    e5: Int = *r0
    e6: Int = compute min 1000 e5
    *r2' = e6
    resolve [s2']
    await [s1]
    b0 = alloc Int[Z :. e5]
    b1: [Int] = *r1
    execute map-953fc2721145c55433eb2e01ce07 (out b0, in b1, e5)
    b2 = alloc Int[Z :. e6]
    execute fold-maps-etc-279dfcb93aed5661c4 {- Cluster with 1 generate, then 2 backpermutes, then 1 map, then 2 backpermutes, then 1 map and finally 1 fold-} (out b2, e4, e6, e3, e2, e1, e0, in b0, e5)
    *r3' = b2
    resolve [s3']
down
OriginalAcc:
\a0 -> fold (\x0 x1 -> x0 + x1) 0 (let a1 = map (\x0 -> x0 * 2) a0 in zipWith (\x0 x1 -> x0 + x1) (replicate (let () = () in T1 (), 1000000) (map (\x0 -> x0 + 1) a1)) (replicate (let () = () in T1 (), 1000000) (generate (T1 1000) (\(T1 x0) -> x0 + (a1 ! (T1 0))))))

Desugared OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 * 2, in (Z :. e0) b0, out (Z :. e0) b1)
  b2: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 + 1, in (Z :. e0) b1, out (Z :. e0) b2)
  T1 () = compute let () = () in T1 ()
  e1: Int = compute 1000000
  T2 (e2: Int) (e3: Int) = compute indexFull (T2 () e1) (T1 e0)
  b3: [Int]¹ = alloc Int[Z :. e2 :. e3]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e1) (T2 x0 x1), in (Z :. e0) b2, out (Z :. e2 :. e3) b3)
  e4: Int = compute 1000
  b4: [Int]¹ = alloc Int[Z :. e4]
  execute generate (\(T1 x0) -> x0 + (let x1 = toIndex (T1 e0) (T1 0) in (b1 !! x1)), out (Z :. e4) b4)
  T1 () = compute let () = () in T1 ()
  e5: Int = compute 1000000
  T2 (e6: Int) (e7: Int) = compute indexFull (T2 () e5) (T1 e4)
  b5: [Int]¹ = alloc Int[Z :. e6 :. e7]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e5) (T2 x0 x1), in (Z :. e4) b4, out (Z :. e6 :. e7) b5)
  e8: Int = compute min e2 e6
  e9: Int = compute min e3 e7
  b6: [Int]¹ = alloc Int[Z :. e8 :. e9]
  b7: [Int]¹ = alloc Int[Z :. e8 :. e9]
  b8: [Int]¹ = alloc Int[Z :. e8 :. e9]
  e

(fromList [L5{Just L2{Nothing} }  :-> L8{Just L2{Nothing} } ,L8{Just L2{Nothing} }  :-> L13{Just L2{Nothing} } ,L9{Just L2{Nothing} }  :-> L36{Just L2{Nothing} } ,L13{Just L2{Nothing} }  :-> L36{Just L2{Nothing} } ,L14{Just L2{Nothing} }  :-> L25{Just L2{Nothing} } ,L18{Just L2{Nothing} }  :-> L25{Just L2{Nothing} } ,L19{Just L2{Nothing} }  :-> L37{Just L2{Nothing} } ,L21{Just L2{Nothing} }  :-> L37{Just L2{Nothing} } ,L25{Just L2{Nothing} }  :-> L37{Just L2{Nothing} } ,L28{Just L2{Nothing} }  :-> L41{Just L2{Nothing} } ,L36{Just L2{Nothing} }  :-> L38{Just L2{Nothing} } ,L37{Just L2{Nothing} }  :-> L38{Just L2{Nothing} } ,L38{Just L2{Nothing} }  :-> L41{Just L2{Nothing} } ],13,fromList [(L1{Nothing} ,fun),(L2{Nothing} ,bod),(L3{Just L2{Nothing} } ,lhs),(L4{Just L2{Nothing} } ,alc),(L5{Just L2{Nothing} } ,exe'),(L6{Just L2{Nothing} } ,lhs),(L7{Just L2{Nothing} } ,alc),(L8{Just L2{Nothing} } ,exe'),(L9{Just L2{Nothing} } ,lhs),(L10{Just L2{Nothing} } ,cmp),(L11{Just L2{Nothing} } ,lhs),(L12{Just L2{Nothing} } ,alc),(L13{Just L2{Nothing} } ,exe'),(L14{Just L2{Nothing} } ,lhs),(L15{Just L2{Nothing} } ,cmp),(L16{Just L2{Nothing} } ,lhs),(L17{Just L2{Nothing} } ,alc),(L18{Just L2{Nothing} } ,exe'),(L19{Just L2{Nothing} } ,lhs),(L20{Just L2{Nothing} } ,cmp),(L21{Just L2{Nothing} } ,lhs),(L22{Just L2{Nothing} } ,cmp),(L23{Just L2{Nothing} } ,lhs),(L24{Just L2{Nothing} } ,alc),(L25{Just L2{Nothing} } ,exe'),(L26{Just L2{Nothing} } ,lhs),(L27{Just L2{Nothing} } ,cmp),(L28{Just L2{Nothing} } ,lhs),(L29{Just L2{Nothing} } ,cmp),(L30{Just L2{Nothing} } ,lhs),(L31{Just L2{Nothing} } ,alc),(L32{Just L2{Nothing} } ,lhs),(L33{Just L2{Nothing} } ,alc),(L34{Just L2{Nothing} } ,lhs),(L35{Just L2{Nothing} } ,alc),(L36{Just L2{Nothing} } ,exe'),(L37{Just L2{Nothing} } ,exe'),(L38{Just L2{Nothing} } ,exe'),(L39{Just L2{Nothing} } ,lhs),(L40{Just L2{Nothing} } ,alc),(L41{Just L2{Nothing} } ,exe'),(L42{Just L2{Nothing} } ,ret)])
True
True
True
False
True
False
False
True
False
True
False
True
False


(fromList [L5{Just L2{Nothing} }  :-> L8{Just L2{Nothing} } ,L8{Just L2{Nothing} }  :-> L13{Just L2{Nothing} } ,L9{Just L2{Nothing} }  :-> L36{Just L2{Nothing} } ,L13{Just L2{Nothing} }  :-> L36{Just L2{Nothing} } ,L14{Just L2{Nothing} }  :-> L25{Just L2{Nothing} } ,L18{Just L2{Nothing} }  :-> L25{Just L2{Nothing} } ,L19{Just L2{Nothing} }  :-> L37{Just L2{Nothing} } ,L21{Just L2{Nothing} }  :-> L37{Just L2{Nothing} } ,L25{Just L2{Nothing} }  :-> L37{Just L2{Nothing} } ,L28{Just L2{Nothing} }  :-> L41{Just L2{Nothing} } ,L36{Just L2{Nothing} }  :-> L38{Just L2{Nothing} } ,L37{Just L2{Nothing} }  :-> L38{Just L2{Nothing} } ,L38{Just L2{Nothing} }  :-> L41{Just L2{Nothing} } ],13,fromList [(L1{Nothing} ,fun),(L2{Nothing} ,bod),(L3{Just L2{Nothing} } ,lhs),(L4{Just L2{Nothing} } ,alc),(L5{Just L2{Nothing} } ,exe'),(L6{Just L2{Nothing} } ,lhs),(L7{Just L2{Nothing} } ,alc),(L8{Just L2{Nothing} } ,exe'),(L9{Just L2{Nothing} } ,lhs),(L10{Just L2{Nothing} } ,cmp),(L11{Just L2{Nothing} } ,lhs),(L12{Just L2{Nothing} } ,alc),(L13{Just L2{Nothing} } ,exe'),(L14{Just L2{Nothing} } ,lhs),(L15{Just L2{Nothing} } ,cmp),(L16{Just L2{Nothing} } ,lhs),(L17{Just L2{Nothing} } ,alc),(L18{Just L2{Nothing} } ,exe'),(L19{Just L2{Nothing} } ,lhs),(L20{Just L2{Nothing} } ,cmp),(L21{Just L2{Nothing} } ,lhs),(L22{Just L2{Nothing} } ,cmp),(L23{Just L2{Nothing} } ,lhs),(L24{Just L2{Nothing} } ,alc),(L25{Just L2{Nothing} } ,exe'),(L26{Just L2{Nothing} } ,lhs),(L27{Just L2{Nothing} } ,cmp),(L28{Just L2{Nothing} } ,lhs),(L29{Just L2{Nothing} } ,cmp),(L30{Just L2{Nothing} } ,lhs),(L31{Just L2{Nothing} } ,alc),(L32{Just L2{Nothing} } ,lhs),(L33{Just L2{Nothing} } ,alc),(L34{Just L2{Nothing} } ,lhs),(L35{Just L2{Nothing} } ,alc),(L36{Just L2{Nothing} } ,exe'),(L37{Just L2{Nothing} } ,exe'),(L38{Just L2{Nothing} } ,exe'),(L39{Just L2{Nothing} } ,lhs),(L40{Just L2{Nothing} } ,alc),(L41{Just L2{Nothing} } ,exe'),(L42{Just L2{Nothing} } ,ret)])
True
False
False
True
False
True
False
False
True
False
True
True
True
xecute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e2 :. e3) b3, out (Z :. e8 :. e9) b7)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e6 :. e7) b5, out (Z :. e8 :. e9) b8)
  execute map (\(x0, x1) -> x0 + x1, in (Z :. e8 :. e9) (b7, b8), out (Z :. e8 :. e9) b6)
  b9: [Int]¹ = alloc Int[Z :. e8]
  b10: [Int]¹ = alloc Int[Z :. e8]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e8 :. e9) b6, out (Z :. e8) b10)
  execute map (\x0 -> let (x1, x2) = (0, x0) in x1 + x2, in (Z :. e8) b10, out (Z :. e8) b9)
  return (T2 e8 b9)

Simplified OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
  b2: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) b2)
  e1: Int = compute 1000000
  b3: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b2, out (Z :. e0 :. e1) b3)
  e2: Int = compute 1000
  b4: [Int]¹ = alloc Int[Z :. e2]
  execute generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) b4)
  e3: Int = compute 1000
  e4: Int = compute 1000000
  b5: [Int]¹ = alloc Int[Z :. e3 :. e4]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) b4, out (Z :. e3 :. e4) b5)
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  b6: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b7: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b8: [Int]¹ = alloc Int[Z :. e5 :. e6]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) b3, out (Z :. e5 :. e6) b7)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) b5, out (Z :. e5 :. e6) b8)
  execute map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (b7, b8), out (Z :. e5 :. e6) b6)
  b9: [Int]¹ = alloc Int[Z :. e5]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) b6, out (Z :. e5) b9)
  return (T2 e5 b9)

PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  b2: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  e2: Int = compute 1000
  e3: Int = compute 1000
  e4: Int = compute 1000000
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  execute map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
  b3: [Int]¹ = alloc Int[Z :. e0 :. e1]
  b4: [Int]¹ = alloc Int[Z :. e2]
  b5: [Int]¹ = alloc Int[Z :. e3 :. e4]
  b6: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b7: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b8: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b9: [Int]¹ = alloc Int[Z :. e5]
  execute {
    generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) b4)
    fused diagonally: (b4)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) b4, out (Z :. e3 :. e4) b5)
    fused diagonally: (b5)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) b5, out (Z :. e5 :. e6) b8)
    fused diagonally: (b8)
    map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) b2)
    fused diagonally: (b2)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b2, out (Z :. e0 :. e1) b3)
    fused diagonally: (b3)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) b3, out (Z :. e5 :. e6) b7)
    fused diagonally: (b7)
    map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (b7, b8), out (Z :. e5 :. e6) b6)
    fused diagonally: (b6)
    fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) b6, out (Z :. e5) b9)
  }
  return (T2 e5 b9)
SLV'd PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  e2: Int = compute 1000
  e3: Int = compute 1000
  e4: Int = compute 1000000
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  execute map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
  b2: [Int]¹ = alloc Int[Z :. e5]
  execute {
    generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) %0)
    fused vertically: (%0)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) %0, out (Z :. e3 :. e4) %1)
    fused vertically: (%1)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) %1, out (Z :. e5 :. e6) %2)
    fused vertically: (%2)
    map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) %3)
    fused vertically: (%3)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) %3, out (Z :. e0 :. e1) %4)
    fused vertically: (%4)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) %4, out (Z :. e5 :. e6) %5)
    fused vertically: (%5)
    map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (%5, %2), out (Z :. e5 :. e6) %6)
    fused vertically: (%6)
    fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) %6, out (Z :. e5) b2)
  }
  return (T2 e5 b2)

Schedule:
\T2 (s0: Signal, r0: *Int) (s1: Signal, r1: *[Int]) ->
  \T2 (s2': Resolver, r2': *out Int) (s3': Resolver, r3': *out [Int]) ->
    await [s0]
    e0: Int = compute 1000000
    e1: Int = compute 1000
    e2: Int = compute 1000
    e3: Int = compute 1000000
    e4: Int = compute 1000000
    e5: Int = *r0
    e6: Int = compute min 1000 e5
    *r2' = e6
    resolve [s2']
    await [s1]
    b0 = alloc Int[Z :. e5]
    b1: [Int] = *r1
    execute map-953fc2721145c55433eb2e01ce07 (out b0, in b1, e5)
    b2 = alloc Int[Z :. e6]
    execute fold-maps-etc-279dfcb93aed5661c4 {- Cluster with 1 generate, then 2 backpermutes, then 1 map, then 2 backpermutes, then 1 map and finally 1 fold-} (out b2, e4, e6, e3, e2, e1, e0, in b0, e5)
    *r3' = b2
    resolve [s3']
up
OriginalAcc:
\a0 -> fold (\x0 x1 -> x0 + x1) 0 (let a1 = map (\x0 -> x0 * 2) a0 in zipWith (\x0 x1 -> x0 + x1) (replicate (let () = () in T1 (), 1000000) (map (\x0 -> x0 + 1) a1)) (replicate (let () = () in T1 (), 1000000) (generate (T1 1000) (\(T1 x0) -> x0 + (a1 ! (T1 0))))))

Desugared OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 * 2, in (Z :. e0) b0, out (Z :. e0) b1)
  b2: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 + 1, in (Z :. e0) b1, out (Z :. e0) b2)
  T1 () = compute let () = () in T1 ()
  e1: Int = compute 1000000
  T2 (e2: Int) (e3: Int) = compute indexFull (T2 () e1) (T1 e0)
  b3: [Int]¹ = alloc Int[Z :. e2 :. e3]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e1) (T2 x0 x1), in (Z :. e0) b2, out (Z :. e2 :. e3) b3)
  e4: Int = compute 1000
  b4: [Int]¹ = alloc Int[Z :. e4]
  execute generate (\(T1 x0) -> x0 + (let x1 = toIndex (T1 e0) (T1 0) in (b1 !! x1)), out (Z :. e4) b4)
  T1 () = compute let () = () in T1 ()
  e5: Int = compute 1000000
  T2 (e6: Int) (e7: Int) = compute indexFull (T2 () e5) (T1 e4)
  b5: [Int]¹ = alloc Int[Z :. e6 :. e7]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e5) (T2 x0 x1), in (Z :. e4) b4, out (Z :. e6 :. e7) b5)
  e8: Int = compute min e2 e6
  e9: Int = compute min e3 e7
  b6: [Int]¹ = alloc Int[Z :. e8 :. e9]
  b7: [Int]¹ = alloc Int[Z :. e8 :. e9]
  b8: [Int]¹ = alloc Int[Z :. e8 :. e9]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e2 :. e3) b3, out (Z :. e8 :. e9) b7)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e6 :. e7) b5, out (Z :. e8 :. e9) b8)
  execute map (\(x0, x1) -> x0 + x1, in (Z :. e8 :. e9) (b7, b8), out (Z :. e8 :. e9) b6)
  b9: [Int]¹ = alloc Int[Z :. e8]
  b10: [Int]¹ = alloc Int[Z :. e8]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e8 :. e9) b6, out (Z :. e8) b10)
  execute map (\x0 -> let (x1, x2) = (0, x0) in x1 + x2, in (Z :. e8) b10, out (Z :. e8) b9)
  return (T2 e8 b9)

Simplified OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
  b2: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) b2)
  e1: Int = compute 1000000
  b3: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b2, out (Z :. e0 :. e1) b3)
  e2: Int = compute 1000
  b4: [Int]¹ = alloc Int[Z :. e2]
  execute generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) b4)
  e3: Int = compute 1000
  e4: Int = compute 1000000
  b5: [Int]¹ = alloc Int[Z :. e3 :. e4]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) b4, out (Z :. e3 :. e4) b5)
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  b6: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b7: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b8: [Int]¹ = alloc Int[Z :. e5 :. e6]
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) b3, out (Z :. e5 :. e6) b7)
  execute backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) b5, out (Z :. e5 :. e6) b8)
  execute map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (b7, b8), out (Z :. e5 :. e6) b6)
  b9: [Int]¹ = alloc Int[Z :. e5]
  execute fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) b6, out (Z :. e5) b9)
  return (T2 e5 b9)

PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  b2: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  e2: Int = compute 1000
  e3: Int = compute 1000
  e4: Int = compute 1000000
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  execute {
    map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
    fused diagonally: (b1)
    map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) b2)
  }
  b3: [Int]¹ = alloc Int[Z :. e0 :. e1]
  b4: [Int]¹ = alloc Int[Z :. e2]
  b5: [Int]¹ = alloc Int[Z :. e3 :. e4]
  b6: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b7: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b8: [Int]¹ = alloc Int[Z :. e5 :. e6]
  b9: [Int]¹ = alloc Int[Z :. e5]
  execute {
    generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) b4)
    fused diagonally: (b4)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) b4, out (Z :. e3 :. e4) b5)
    fused diagonally: (b5)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) b5, out (Z :. e5 :. e6) b8)
    fused diagonally: (b8)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b2, out (Z :. e0 :. e1) b3)
    fused diagonally: (b3)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) b3, out (Z :. e5 :. e6) b7)
    fused diagonally: (b7)
    map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (b7, b8), out (Z :. e5 :. e6) b6)
    fused diagonally: (b6)
    fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) b6, out (Z :. e5) b9)
  }
  return (T2 e5 b9)
SLV'd PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  b2: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  e2: Int = compute 1000
  e3: Int = compute 1000
  e4: Int = compute 1000000
  e5: Int = compute min 1000 e0
  e6: Int = compute 1000000
  execute {
    map (\x0 -> 2 * x0, in (Z :. e0) b0, out (Z :. e0) b1)
    fused diagonally: (b1)
    map (\x0 -> 1 + x0, in (Z :. e0) b1, out (Z :. e0) b2)
  }
  b3: [Int]¹ = alloc Int[Z :. e5]
  execute {
    generate (\(T1 x0) -> x0 + (b1 !! 0), out (Z :. e2) %0)
    fused vertically: (%0)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e2) %0, out (Z :. e3 :. e4) %1)
    fused vertically: (%1)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e3 :. e4) %1, out (Z :. e5 :. e6) %2)
    fused vertically: (%2)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b2, out (Z :. e0 :. e1) %3)
    fused vertically: (%3)
    backpermute (\(T2 x0 x1) -> T2 x0 x1, in (Z :. e0 :. e1) %3, out (Z :. e5 :. e6) %4)
    fused vertically: (%4)
    map (\(x0, x1) -> x0 + x1, in (Z :. e5 :. e6) (%4, %2), out (Z :. e5 :. e6) %5)
    fused vertically: (%5)
    fold-2 (\x0 x1 -> x0 + x1, in (Z :. e5 :. e6) %5, out (Z :. e5) b3)
  }
  return (T2 e5 b3)

Schedule:
\T2 (s0: Signal, r0: *Int) (s1: Signal, r1: *[Int]) ->
  \T2 (s2': Resolver, r2': *out Int) (s3': Resolver, r3': *out [Int]) ->
    await [s0]
    e0: Int = compute 1000000
    e1: Int = compute 1000
    e2: Int = compute 1000
    e3: Int = compute 1000000
    e4: Int = compute 1000000
    e5: Int = *r0
    e6: Int = compute min 1000 e5
    *r2' = e6
    b0 = alloc Int[Z :. e5]
    resolve [s2']
    await [s1]
    b1 = alloc Int[Z :. e5]
    b2: [Int] = *r1
    execute maps-fa2a84921035b7ec79e4b990b85 {- Cluster with 2 maps-} (out b1, out b0, in b2, e5)
    b3 = alloc Int[Z :. e6]
    execute fold-map-etc-1a20fd7bd0c61dc78f9 {- Cluster with 1 generate, then 4 backpermutes, then 1 map and finally 1 fold-} (out b3, e4, e6, e3, e2, e1, e0, in b1, in b0, e5)
    *r3' = b3
    resolve [s3']

accelerate-llvm-native> Test suite nofib-llvm-native passed
