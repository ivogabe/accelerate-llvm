DEPRECATED: The package at Archive from https://github.com/msakai/haskell-MIP/archive/4295aa21a24a30926b55770c55ac00f749fb8a39.tar.gz in subdir MIP does not include a cabal file.
Instead, it includes an hpack package.yaml file for generating a cabal file.
This usage is deprecated; please see https://github.com/commercialhaskell/stack/issues/5210.
Support for this workflow will be removed in the future.

Stack has not been tested with GHC versions above 9.0, and using 9.4.5, this may fail
Stack has not been tested with Cabal versions above 3.4, but version 3.8.1.0 was found, this may fail
accelerate-llvm-native> test (suite: nofib-llvm-native)



(fromList [L5{Just L2{Nothing} }  :-> L10{Just L2{Nothing} } ],1,fromList [(L1{Nothing} ,fun),(L2{Nothing} ,bod),(L3{Just L2{Nothing} } ,lhs),(L4{Just L2{Nothing} } ,alc),(L5{Just L2{Nothing} } ,exe'),(L6{Just L2{Nothing} } ,lhs),(L7{Just L2{Nothing} } ,cmp),(L8{Just L2{Nothing} } ,lhs),(L9{Just L2{Nothing} } ,alc),(L10{Just L2{Nothing} } ,exe'),(L11{Just L2{Nothing} } ,ret)])
True


(fromList [L5{Just L2{Nothing} }  :-> L10{Just L2{Nothing} } ],1,fromList [(L1{Nothing} ,fun),(L2{Nothing} ,bod),(L3{Just L2{Nothing} } ,lhs),(L4{Just L2{Nothing} } ,alc),(L5{Just L2{Nothing} } ,exe'),(L6{Just L2{Nothing} } ,lhs),(L7{Just L2{Nothing} } ,cmp),(L8{Just L2{Nothing} } ,lhs),(L9{Just L2{Nothing} } ,alc),(L10{Just L2{Nothing} } ,exe'),(L11{Just L2{Nothing} } ,ret)])
True
readswrites
OriginalAcc:
\a0 -> replicate (let () = () in T1 (), 1000000) (map (\x0 -> x0 + 1) a0)

Desugared OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 + 1, in (Z :. e0) b0, out (Z :. e0) b1)
  T1 () = compute let () = () in T1 ()
  e1: Int = compute 1000000
  T2 (e2: Int) (e3: Int) = compute indexFull (T2 () e1) (T1 e0)
  b2: [Int]¹ = alloc Int[Z :. e2 :. e3]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e1) (T2 x0 x1), in (Z :. e0) b1, out (Z :. e2 :. e3) b2)
  return (T3 e2 e3 b2)

Simplified OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) b1)
  e1: Int = compute 1000000
  b2: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b1, out (Z :. e0 :. e1) b2)
  return (T3 e0 e1 b2)

PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  b2: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute {
    map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) b1)
    fused diagonally: (b1)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b1, out (Z :. e0 :. e1) b2)
  }
  return (T3 e0 e1 b2)
SLV'd PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  e1: Int = compute 1000000
  b1: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute {
    map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) %0)
    fused vertically: (%0)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) %0, out (Z :. e0 :. e1) b1)
  }
  return (T3 e0 e1 b1)

Schedule:
\T2 (s0: Signal, r0: *Int) (s1: Signal, r1: *[Int]) ->
  \T3 (s2': Resolver, r2': *out Int) (s3': Resolver, r3': *out Int) (s4': Resolver, r4': *out [Int]) ->
    e0: Int = compute 1000000
    spawn await [s0] {
      e1: Int = *r0
      *r2' = e1
      resolve [s2']
    }
    spawn {
      *r3' = e0
      resolve [s3']
    }
    await [s1, s0]
    e1: Int = *r0
    b0 = alloc Int[Z :. e1 :. e0]
    b1: [Int] = *r1
    execute map-backpermute-0a6fc0f096763b5b {- Cluster with 1 map and then 1 backpermute-} (out b0, e0, in b1, e1)
    *r4' = b0
    resolve [s4']
down
OriginalAcc:
\a0 -> replicate (let () = () in T1 (), 1000000) (map (\x0 -> x0 + 1) a0)

Desugared OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 + 1, in (Z :. e0) b0, out (Z :. e0) b1)
  T1 () = compute let () = () in T1 ()
  e1: Int = compute 1000000
  T2 (e2: Int) (e3: Int) = compute indexFull (T2 () e1) (T1 e0)
  b2: [Int]¹ = alloc Int[Z :. e2 :. e3]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e1) (T2 x0 x1), in (Z :. e0) b1, out (Z :. e2 :. e3) b2)
  return (T3 e2 e3 b2)

Simplified OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) b1)
  e1: Int = compute 1000000
  b2: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b1, out (Z :. e0 :. e1) b2)
  return (T3 e0 e1 b2)

PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  b2: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute {
    map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) b1)
    fused diagonally: (b1)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b1, out (Z :. e0 :. e1) b2)
  }
  return (T3 e0 e1 b2)
SLV'd PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  e1: Int = compute 1000000
  b1: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute {
    map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) %0)
    fused vertically: (%0)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) %0, out (Z :. e0 :. e1) b1)
  }
  return (T3 e0 e1 b1)

Schedule:
\T2 (s0: Signal, r0: *Int) (s1: Signal, r1: *[Int]) ->
  \T3 (s2': Resolver, r2': *out Int) (s3': Resolver, r3': *out Int) (s4': Resolver, r4': *out [Int]) ->
    e0: Int = compute 1000000
    spawn await [s0] {
      e1: Int = *r0
      *r2' = e1
      resolve [s2']
    }
    spawn {
      *r3' = e0
      resolve [s3']
    }
    await [s1, s0]
    e1: Int = *r0
    b0 = alloc Int[Z :. e1 :. e0]
    b1: [Int] = *r1
    execute map-backpermute-0a6fc0f096763b5b {- Cluster with 1 map and then 1 backpermute-} (out b0, e0, in b1, e1)
    *r4' = b0
    resolve [s4']
up
OriginalAcc:
\a0 -> replicate (let () = () in T1 (), 1000000) (map (\x0 -> x0 + 1) a0)

Desugared OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> x0 + 1, in (Z :. e0) b0, out (Z :. e0) b1)
  T1 () = compute let () = () in T1 ()
  e1: Int = compute 1000000
  T2 (e2: Int) (e3: Int) = compute indexFull (T2 () e1) (T1 e0)
  b2: [Int]¹ = alloc Int[Z :. e2 :. e3]
  execute backpermute (\(T2 x0 x1) -> indexSlice (T2 () e1) (T2 x0 x1), in (Z :. e0) b1, out (Z :. e2 :. e3) b2)
  return (T3 e2 e3 b2)

Simplified OperationAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  execute map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) b1)
  e1: Int = compute 1000000
  b2: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b1, out (Z :. e0 :. e1) b2)
  return (T3 e0 e1 b2)

PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  b1: [Int]¹ = alloc Int[Z :. e0]
  e1: Int = compute 1000000
  b2: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute {
    map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) b1)
    fused diagonally: (b1)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) b1, out (Z :. e0 :. e1) b2)
  }
  return (T3 e0 e1 b2)
SLV'd PartitionedAcc:
\T2 (e0: Int) (b0: [Int]) ->
  e1: Int = compute 1000000
  b1: [Int]¹ = alloc Int[Z :. e0 :. e1]
  execute {
    map (\x0 -> 1 + x0, in (Z :. e0) b0, out (Z :. e0) %0)
    fused vertically: (%0)
    backpermute (\(T2 x0 _) -> T1 x0, in (Z :. e0) %0, out (Z :. e0 :. e1) b1)
  }
  return (T3 e0 e1 b1)

Schedule:
\T2 (s0: Signal, r0: *Int) (s1: Signal, r1: *[Int]) ->
  \T3 (s2': Resolver, r2': *out Int) (s3': Resolver, r3': *out Int) (s4': Resolver, r4': *out [Int]) ->
    e0: Int = compute 1000000
    spawn await [s0] {
      e1: Int = *r0
      *r2' = e1
      resolve [s2']
    }
    spawn {
      *r3' = e0
      resolve [s3']
    }
    await [s1, s0]
    e1: Int = *r0
    b0 = alloc Int[Z :. e1 :. e0]
    b1: [Int] = *r1
    execute map-backpermute-0a6fc0f096763b5b {- Cluster with 1 map and then 1 backpermute-} (out b0, e0, in b1, e1)
    *r4' = b0
    resolve [s4']

accelerate-llvm-native> Test suite nofib-llvm-native passed
